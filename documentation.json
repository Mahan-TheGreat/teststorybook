{
    "pipes": [],
    "interfaces": [
        {
            "name": "ILoginForm",
            "id": "interface-ILoginForm-76ca95ec981c4669adc08a2fec6230a74185c321737b182eec9dc1e2f57cd0e3fe95eebdf065d67c1f286136ecdf762a9f6b543525aae5504ba1e02b2298cf37",
            "file": "src/app/components/login/login.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport {  FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n\r\nexport interface ILoginForm {\r\n  Username: FormControl;\r\n  Password: FormControl;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport default class LoginComponent {\r\n\r\n  constructor(){\r\n  }\r\n  \r\n   requiredValidator = Validators.required;\r\n  \r\n  // @Input()\r\n  loginForm = new FormGroup<ILoginForm>({\r\n    Username: new FormControl('', { nonNullable: true, validators: [Validators.required] }),\r\n    Password: new FormControl('', { nonNullable: true, validators: [Validators.required] })\r\n  });\r\n\r\n  @Input()\r\n  ErrorMessage=false;\r\n\r\n  get Username(){ return this.loginForm.get('Username');}   \r\n  get Password(){ return this.loginForm.get('Password');}   \r\n\r\n  // loginFormStruct: LoginForm = {\r\n  //   username: {\r\n  //     isRequired: true,\r\n  //     minLength: 3,\r\n  //     fieldType: 'string',\r\n  //     fieldName: 'username',\r\n  //   },\r\n  //   password: {\r\n  //     isRequired: true,\r\n  //     minLength: 6,\r\n  //     maxLength: 20,\r\n  //     fieldType: 'password',\r\n  //     fieldName: 'password',\r\n  //   }\r\n  // }\r\n\r\n  // handleClick(){\r\n  //   console.log(this.loginForm.value);\r\n  // }\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "Password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "Username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-52aa59603158437a380bc6fc6c68e6424b1fed63021fadbff29da27b30df62b0f5b3e4230dad7caa3d0c5ae6fec3039e02511c931d76d8e5143c5367ee92c59b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'teststorybook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { PrimeNGConfig } from 'primeng/api';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  constructor(private primeConfig: PrimeNGConfig){}\n  title = 'teststorybook';\n\n  ngOnInit(){\n    this.primeConfig.ripple = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "primeConfig",
                        "type": "PrimeNGConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "primeConfig",
                        "type": "PrimeNGConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-login></app-login>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-76ca95ec981c4669adc08a2fec6230a74185c321737b182eec9dc1e2f57cd0e3fe95eebdf065d67c1f286136ecdf762a9f6b543525aae5504ba1e02b2298cf37",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ErrorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup<ILoginForm>({\r\n    Username: new FormControl('', { nonNullable: true, validators: [Validators.required] }),\r\n    Password: new FormControl('', { nonNullable: true, validators: [Validators.required] })\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "requiredValidator",
                    "defaultValue": "Validators.required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport {  FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n\r\nexport interface ILoginForm {\r\n  Username: FormControl;\r\n  Password: FormControl;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport default class LoginComponent {\r\n\r\n  constructor(){\r\n  }\r\n  \r\n   requiredValidator = Validators.required;\r\n  \r\n  // @Input()\r\n  loginForm = new FormGroup<ILoginForm>({\r\n    Username: new FormControl('', { nonNullable: true, validators: [Validators.required] }),\r\n    Password: new FormControl('', { nonNullable: true, validators: [Validators.required] })\r\n  });\r\n\r\n  @Input()\r\n  ErrorMessage=false;\r\n\r\n  get Username(){ return this.loginForm.get('Username');}   \r\n  get Password(){ return this.loginForm.get('Password');}   \r\n\r\n  // loginFormStruct: LoginForm = {\r\n  //   username: {\r\n  //     isRequired: true,\r\n  //     minLength: 3,\r\n  //     fieldType: 'string',\r\n  //     fieldName: 'username',\r\n  //   },\r\n  //   password: {\r\n  //     isRequired: true,\r\n  //     minLength: 6,\r\n  //     maxLength: 20,\r\n  //     fieldType: 'password',\r\n  //     fieldName: 'password',\r\n  //   }\r\n  // }\r\n\r\n  // handleClick(){\r\n  //   console.log(this.loginForm.value);\r\n  // }\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-container {\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #d5d5d5;\r\n}\r\n\r\n.login-form {\r\n    background-color: #fff;\r\n    padding: 5rem;\r\n    border-radius: 5px;\r\n}\r\n\r\n.formControl{\r\n    \r\n    display: flex ;\r\n    flex-direction: column-reverse ;\r\n}\r\n\r\nh6{\r\n   font-weight: lighter; \r\n}\r\n.error{\r\n    color:red;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "accessors": {
                "Username": {
                    "name": "Username",
                    "getSignature": {
                        "name": "Username",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                },
                "Password": {
                    "name": "Password",
                    "getSignature": {
                        "name": "Password",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                }
            },
            "templateData": "<div class=\"login-container\">\r\n\r\n    <section id=\"login-form\" class=\"login-form\"  [formGroup]=\"loginForm\">\r\n\r\n        <h1 class=\"mb-4 text-center\">Login Form</h1>\r\n        <h2 class=\"mb-16 text-center\">Please fill up your credentials to log in.</h2>\r\n\r\n        <!-- <div class=\"mb-8  \" *ngFor=\"let object of loginForm.controls | keyvalue\">\r\n            <ng-container [ngSwitch]=\"object.key\">\r\n\r\n                <span  *ngSwitchCase=\"'Username'\" class=\"p-float-label\">\r\n                    <input id=\"{{object.key}}-input\" type=\"text\" formControlName=\"{{object.key}}\" class=\"w-full\"\r\n                        pInputText>\r\n                    <label for=\"{{object.key}}-input\">{{object.key}}\r\n                        <span class=\"red\" *ngIf=\"object.value.hasValidator(requiredValidator)\">*</span>\r\n                    </label>\r\n                </span>\r\n\r\n                <span *ngSwitchCase=\"'Password'\" class=\"p-float-label\">\r\n                    <p-password styleClass=\"w-full\" formControlName=\"{{object.key}}\" inputStyleClass=\"w-full\"\r\n                        inputId=\"{{object.key}}-input\" [feedback]=\"false\"></p-password>\r\n                    <label for=\"{{object.key}}-input\">{{object.key}}\r\n                        <span class=\"red\" *ngIf=\"object.value.hasValidator(requiredValidator)\">*</span>\r\n                    </label>\r\n\r\n\r\n                </span>\r\n             \r\n               \r\n            </ng-container>\r\n        </div> -->\r\n            <span class=\"p-float-label mb-8\" >\r\n                <input id=\"Username-input\" type=\"text\" formControlName=\"Username\"  class=\"w-full\"\r\n                    pInputText>\r\n                <label for=\"Username-input\">Username\r\n                    <span class=\"red\">*</span>\r\n                </label>\r\n                <h6 class=\"error w-full\" *ngIf=\"ErrorMessage || (Username?.touched && Username?.invalid)\">Username is required.</h6>\r\n            </span>\r\n\r\n            <span  class=\"p-float-label mb-8\"  >\r\n                <p-password styleClass=\"w-full\" formControlName=\"Password\"  inputStyleClass=\"w-full\"\r\n                    inputId=\"Password-input\" [feedback]=\"false\"></p-password>\r\n                <label for=\"Password-input\">Password\r\n                    <span class=\"red\">*</span>\r\n                </label>\r\n                <h6 class=\"error w-full\" *ngIf=\"ErrorMessage || (Password?.touched && Password?.invalid)\">Password is required.</h6>\r\n\r\n            </span>\r\n         \r\n          \r\n        <div class=\"text-center\">\r\n            <button pButton type=\"button\" label=\"Log In\"  \r\n             [disabled]=\"loginForm.invalid\"    class=\"p-button-sm\"></button>\r\n                \r\n        </div>\r\n\r\n    </section>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-3d84b3c0345e8488fe84de450e8528c1b89c27998ead19c7809115f0a7a3be91744265f139c1ac566bd4f53a17da65606283616b0d175dc27521fbb48f9f6a43",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n// Component Imports\n\nimport LoginComponent from 'src/app/components/login/login.component';\n\n\n// primeng imports\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { DividerModule } from 'primeng/divider'\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent\n    ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    ButtonModule,\n    InputTextModule,\n    PasswordModule,\n    DividerModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoginComponent>",
                "defaultValue": "(args: LoginComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/login.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoginComponent>",
                    "defaultValue": "(args: LoginComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}